{"ast":null,"code":"var _jsxFileName = \"/Users/dima/Documents/my Blog/blog/src/component/Blog/BlogPage.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Prismic from '@prismicio/client';\nimport { Link, RichText, Date } from 'prismic-reactjs';\nimport './style.css';\nimport Loader from './components/Loader';\nimport { apiEndpoint, accessToken } from '../../data/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BlogPage = () => {\n  _s();\n\n  const [posts, setPosts] = React.useState([]);\n  const [loading, setLoading] = React.useState(false);\n  React.useEffect(() => {\n    const client = Prismic.client(apiEndpoint, {\n      accessToken\n    });\n    setLoading(true);\n\n    const fetchData = async () => {\n      try {\n        const response = await client.query(Prismic.Predicates.at('document.type', 'blog'));\n\n        if (response) {\n          setPosts(response.results);\n        }\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  function formateDate() {\n    var _Date, _posts$data;\n\n    const date = (_Date = Date((_posts$data = posts.data) === null || _posts$data === void 0 ? void 0 : _posts$data.date)) === null || _Date === void 0 ? void 0 : _Date.toString();\n    console.log(date);\n  }\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this);\n  } // console.log(posts)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blogWraper\",\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: RichText.asText(post.data.title)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"formateDate\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: post.data.logo_page.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: RichText.asText(post.data.text)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, this);\n};\n\n_s(BlogPage, \"B1HzkMAPjjnIS0Dl8KHRKFHtmnE=\");\n\n_c = BlogPage;\nexport default _c2 = /*#__PURE__*/React.memo(BlogPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BlogPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/dima/Documents/my Blog/blog/src/component/Blog/BlogPage.js"],"names":["React","Prismic","Link","RichText","Date","Loader","apiEndpoint","accessToken","BlogPage","posts","setPosts","useState","loading","setLoading","useEffect","client","fetchData","response","query","Predicates","at","results","error","console","formateDate","date","data","toString","log","map","post","asText","title","logo_page","url","text","memo"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,IAAzB,QAAqC,iBAArC;AACA,OAAO,aAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAwC,sBAAxC;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,KAAK,CAACW,QAAN,CAAe,EAAf,CAA1B;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,KAAK,CAACW,QAAN,CAAe,KAAf,CAA9B;AAEAX,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACrB,UAAMC,MAAM,GAAGd,OAAO,CAACc,MAAR,CAAeT,WAAf,EAA4B;AAAEC,MAAAA;AAAF,KAA5B,CAAf;AACAM,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAMG,SAAS,GAAG,YAAY;AAC7B,UAAI;AACH,cAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACG,KAAP,CACtBjB,OAAO,CAACkB,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,MAAvC,CADsB,CAAvB;;AAGA,YAAIH,QAAJ,EAAc;AACbP,UAAAA,QAAQ,CAACO,QAAQ,CAACI,OAAV,CAAR;AACA;AACD,OAPD,CAOE,OAAOC,KAAP,EAAc;AACfC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,OATD,SASU;AACTT,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACD,KAbD;;AAcAG,IAAAA,SAAS;AACT,GAlBD,EAkBG,EAlBH;;AAoBA,WAASQ,WAAT,GAAwB;AAAA;;AACtB,UAAMC,IAAI,YAAGrB,IAAI,gBAACK,KAAK,CAACiB,IAAP,gDAAC,YAAYD,IAAb,CAAP,0CAAG,MAAwBE,QAAxB,EAAb;AACAJ,IAAAA,OAAO,CAACK,GAAR,CAAYH,IAAZ;AACD;;AAIF,MAAIb,OAAJ,EAAa;AACZ,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACA,GAjCsB,CAkCvB;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,cACEH,KAAK,CAACoB,GAAN,CAAUC,IAAI,iBACd;AAAA,8BACC;AAAA,kBAAK3B,QAAQ,CAAC4B,MAAT,CAAgBD,IAAI,CAACJ,IAAL,CAAUM,KAA1B;AAAL;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,cAFD,eAGC;AAAK,QAAA,GAAG,EAAEF,IAAI,CAACJ,IAAL,CAAUO,SAAV,CAAoBC;AAA9B;AAAA;AAAA;AAAA;AAAA,cAHD,eAIC;AAAA,kBAAI/B,QAAQ,CAAC4B,MAAT,CAAgBD,IAAI,CAACJ,IAAL,CAAUS,IAA1B;AAAJ;AAAA;AAAA;AAAA;AAAA,cAJD;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYC,CAhDD;;GAAM3B,Q;;KAAAA,Q;AAkDN,kCAAeR,KAAK,CAACoC,IAAN,CAAW5B,QAAX,CAAf","sourcesContent":["import * as React from 'react';\nimport Prismic from '@prismicio/client';\nimport { Link, RichText, Date } from 'prismic-reactjs';\nimport './style.css';\nimport Loader from './components/Loader';\nimport { apiEndpoint, accessToken} from '../../data/constants';\n\nconst BlogPage = () => {\n\tconst [posts, setPosts] = React.useState([]);\n\tconst [loading, setLoading] = React.useState(false);\n\n\tReact.useEffect(() => {\n\t\tconst client = Prismic.client(apiEndpoint, { accessToken });\n\t\tsetLoading(true);\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await client.query(\n\t\t\t\t\tPrismic.Predicates.at('document.type', 'blog')\n\t\t\t\t)\n\t\t\t\tif (response) {\n\t\t\t\t\tsetPosts(response.results)\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t} finally {\n\t\t\t\tsetLoading(false);\n\t\t\t}\n\t\t}\n\t\tfetchData();\n\t}, [])\n\n\tfunction formateDate()  {\n\t\t\tconst date = Date(posts.data?.date)?.toString();\n\t\t\tconsole.log(date)\n\t}\n\t\n\n\nif (loading) {\n\treturn <Loader/>\n}\n// console.log(posts)\n\nreturn (\n\t\t<div className=\"blogWraper\">\n\t\t\t{posts.map(post => (\n\t\t\t\t<div>\n\t\t\t\t\t<h1>{RichText.asText(post.data.title)}</h1>\n\t\t\t\t\t<p><formateDate /></p>\n\t\t\t\t\t<img src={post.data.logo_page.url}/>\n\t\t\t\t\t<p>{RichText.asText(post.data.text)}</p>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n\nexport default React.memo(BlogPage);"]},"metadata":{},"sourceType":"module"}