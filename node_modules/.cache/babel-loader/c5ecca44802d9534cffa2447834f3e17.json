{"ast":null,"code":"var _jsxFileName = \"/Users/dima/Documents/my Blog/blog/src/component/Blog/BlogPage.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Prismic from '@prismicio/client';\nimport { Link, RichText, Date } from 'prismic-reactjs';\nimport './style.css';\nimport Loader from './components/Loader';\nimport { apiEndpoint, accessToken } from '../../data/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BlogPage = () => {\n  _s();\n\n  const [posts, setPosts] = React.useState([]);\n  const [loading, setLoading] = React.useState(false);\n  React.useEffect(() => {\n    const client = Prismic.client(apiEndpoint, {\n      accessToken\n    });\n    setLoading(true);\n\n    const fetchData = async () => {\n      try {\n        const response = await client.query(Prismic.Predicates.at('document.type', 'blog'));\n\n        if (response) {\n          setPosts(response.results);\n        }\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const formateDate = date => {\n    const data = Date(date);\n    const formattedDate = Intl.DateTimeFormat('en-US', {\n      formatMatche: \"basic\",\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\"\n    }).format(data);\n    return formattedDate;\n  };\n\n  function sortArray(array) {\n    array.sort(function (a, b) {\n      const dateA = new Date(a.data.date),\n            dateB = new Date(b.data.date);\n      console.log(dateA, dateB);\n      return dateB - dateA;\n    });\n  }\n\n  console.log(sortArray());\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blogWraper\",\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"blog_title\",\n        children: RichText.asText(post.data.title)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blog_wraper_subtitle\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"blog_subtitle\",\n          children: RichText.asText(post.data.type)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"blog_dot\",\n          children: \"\\u2022\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"blog_data\",\n          children: formateDate(post.data.date)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: post.data.logo_page.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"blog_text\",\n        children: RichText.asText(post.data.text)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 3\n  }, this);\n};\n\n_s(BlogPage, \"B1HzkMAPjjnIS0Dl8KHRKFHtmnE=\");\n\n_c = BlogPage;\nexport default _c2 = /*#__PURE__*/React.memo(BlogPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BlogPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/dima/Documents/my Blog/blog/src/component/Blog/BlogPage.js"],"names":["React","Prismic","Link","RichText","Date","Loader","apiEndpoint","accessToken","BlogPage","posts","setPosts","useState","loading","setLoading","useEffect","client","fetchData","response","query","Predicates","at","results","error","console","formateDate","date","data","formattedDate","Intl","DateTimeFormat","formatMatche","year","month","day","format","sortArray","array","sort","a","b","dateA","dateB","log","map","post","asText","title","type","logo_page","url","text","memo"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Prismic from '@prismicio/client';\nimport { Link, RichText, Date } from 'prismic-reactjs';\nimport './style.css';\nimport Loader from './components/Loader';\nimport { apiEndpoint, accessToken} from '../../data/constants';\n\nconst BlogPage = () => {\n\tconst [posts, setPosts] = React.useState([]);\n\tconst [loading, setLoading] = React.useState(false);\n\n\tReact.useEffect(() => {\n\t\tconst client = Prismic.client(apiEndpoint, { accessToken });\n\t\tsetLoading(true);\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await client.query(\n\t\t\t\t\tPrismic.Predicates.at('document.type', 'blog')\n\t\t\t\t)\n\t\t\t\tif (response) {\n\t\t\t\t\tsetPosts(response.results)\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t} finally {\n\t\t\t\tsetLoading(false);\n\t\t\t}\n\t\t}\n\t\tfetchData();\n\t}, [])\n\n\tconst formateDate = (date) =>  {\n\t\tconst data = Date(date)\n\t\tconst formattedDate = Intl.DateTimeFormat('en-US',{\n\t\t\tformatMatche: \"basic\",\n  \t\tyear: \"numeric\",\n  \t\tmonth: \"long\",\n  \t\tday: \"numeric\"\n\t\t}).format(data);\n\t\t\n\t\t\treturn formattedDate\n\t}\n\t\n\n\nfunction sortArray(array) {\n\tarray.sort(function(a, b){\n\t\tconst dateA=new Date(a.data.date), dateB=new Date(b.data.date);\n\t\tconsole.log(dateA, dateB)\n\t\treturn dateB - dateA \n\t\t})\n}\n\t\n\tconsole.log(sortArray())\n\nif (loading) {\n\treturn <Loader/>\n}\nreturn (\n\t\t<div className=\"blogWraper\">\n\t\t\t{posts.map(post => (\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className='blog_title'>{RichText.asText(post.data.title)}</h1>\n\t\t\t\t\t<div className='blog_wraper_subtitle'>\n\t\t\t\t\t\t<p className='blog_subtitle'>{RichText.asText(post.data.type)}</p>\n\t\t\t\t\t\t<p className='blog_dot'>&bull;</p>\n\t\t\t\t\t\t<p className='blog_data'>{formateDate((post.data.date))}</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<img src={post.data.logo_page.url}/>\n\t\t\t\t\t<p className='blog_text'>{RichText.asText(post.data.text)}</p>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n\nexport default React.memo(BlogPage);"]},"metadata":{},"sourceType":"module"}