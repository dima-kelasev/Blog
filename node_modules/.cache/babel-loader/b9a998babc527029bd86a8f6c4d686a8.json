{"ast":null,"code":"var _jsxFileName = \"/Users/dima/Documents/my Blog/blog/src/component/Blog/BlogPage.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Prismic from '@prismicio/client';\nimport { Link, RichText } from 'prismic-reactjs';\nimport './style.css';\nimport Loader from './components/Loader';\nimport { apiEndpoint, accessToken } from '../../data/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BlogPage = () => {\n  _s();\n\n  const [posts, setPosts] = React.useState([]);\n  const [loading, setLoading] = React.useState(false); // console.log(doc)\n\n  React.useEffect(() => {\n    const client = Prismic.client(apiEndpoint, {\n      accessToken\n    });\n    setLoading(true);\n\n    const fetchData = async () => {\n      try {\n        const response = await client.query(Prismic.Predicates.at('document.type', 'blog'));\n\n        if (response) {\n          setPosts(response.results);\n        }\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n  {\n    /* <div className='blogWraper'>\n    <h1>{RichText.asText(posts[0].data.title)}</h1>\n    <p>{RichText.asText(posts[0].data.text)}</p>\n      \t</div> */\n  }\n  {\n    /* <h1>{RichText.asText(posts[1].data.title)}</h1>\n    <img src={posts[0].data.logo_page.url}/>\n    <p>{RichText.asText(posts[1].data.text)}</p> */\n  }\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"BlogWrapper\",\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }, this);\n};\n\n_s(BlogPage, \"B1HzkMAPjjnIS0Dl8KHRKFHtmnE=\");\n\n_c = BlogPage;\nexport default _c2 = /*#__PURE__*/React.memo(BlogPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BlogPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/dima/Documents/my Blog/blog/src/component/Blog/BlogPage.js"],"names":["React","Prismic","Link","RichText","Loader","apiEndpoint","accessToken","BlogPage","posts","setPosts","useState","loading","setLoading","useEffect","client","fetchData","response","query","Predicates","at","results","error","console","map","post","memo"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,iBAA/B;AACA,OAAO,aAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAwC,sBAAxC;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,KAAK,CAACU,QAAN,CAAe,EAAf,CAA1B;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,KAAK,CAACU,QAAN,CAAe,KAAf,CAA9B,CAFsB,CAGtB;;AAEAV,EAAAA,KAAK,CAACa,SAAN,CAAgB,MAAM;AACrB,UAAMC,MAAM,GAAGb,OAAO,CAACa,MAAR,CAAeT,WAAf,EAA4B;AAAEC,MAAAA;AAAF,KAA5B,CAAf;AACAM,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAMG,SAAS,GAAG,YAAY;AAC7B,UAAI;AACH,cAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACG,KAAP,CACtBhB,OAAO,CAACiB,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,MAAvC,CADsB,CAAvB;;AAGA,YAAIH,QAAJ,EAAc;AACbP,UAAAA,QAAQ,CAACO,QAAQ,CAACI,OAAV,CAAR;AACA;AACD,OAPD,CAOE,OAAOC,KAAP,EAAc;AACfC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,OATD,SASU;AACTT,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACD,KAbD;;AAcAG,IAAAA,SAAS;AACT,GAlBD,EAkBG,EAlBH;AAoBI;AAAC;AACN;AACA;AACA;AAAmB;AACd;AAAC;AACN;AACA;AAAqD;;AAErD,MAAIJ,OAAJ,EAAa;AACZ,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,cACEH,KAAK,CAACe,GAAN,CAAUC,IAAI,iBACd;AAAA;AAAA;AAAA;AAAA,YADA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASC,CA9CD;;GAAMjB,Q;;KAAAA,Q;AAgDN,kCAAeP,KAAK,CAACyB,IAAN,CAAWlB,QAAX,CAAf","sourcesContent":["import * as React from 'react';\nimport Prismic from '@prismicio/client';\nimport { Link, RichText } from 'prismic-reactjs';\nimport './style.css';\nimport Loader from './components/Loader';\nimport { apiEndpoint, accessToken} from '../../data/constants';\n\nconst BlogPage = () => {\n\tconst [posts, setPosts] = React.useState([]);\n\tconst [loading, setLoading] = React.useState(false);\n\t// console.log(doc)\n\n\tReact.useEffect(() => {\n\t\tconst client = Prismic.client(apiEndpoint, { accessToken });\n\t\tsetLoading(true);\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tconst response = await client.query(\n\t\t\t\t\tPrismic.Predicates.at('document.type', 'blog')\n\t\t\t\t)\n\t\t\t\tif (response) {\n\t\t\t\t\tsetPosts(response.results)\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t} finally {\n\t\t\t\tsetLoading(false);\n\t\t\t}\n\t\t}\n\t\tfetchData();\n\t}, [])\n\n\t\t\t\t\t{/* <div className='blogWraper'>\n\t\t\t\t\t\t<h1>{RichText.asText(posts[0].data.title)}</h1>\n\t\t\t\t\t\t<p>{RichText.asText(posts[0].data.text)}</p>\n        \t</div> */}\n\t\t\t\t\t{/* <h1>{RichText.asText(posts[1].data.title)}</h1>\n\t\t\t\t\t<img src={posts[0].data.logo_page.url}/>\n\t\t\t\t\t<p>{RichText.asText(posts[1].data.text)}</p> */}\n\nif (loading) {\n\treturn <Loader/>\n}\n\nreturn (\n\t\t<div className=\"BlogWrapper\">\n\t\t\t{posts.map(post => (\n\t\t\t\t<div>\n\t\t\t\t\t{/* <h1>{post.data.title}</h1> */}\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n\nexport default React.memo(BlogPage);"]},"metadata":{},"sourceType":"module"}