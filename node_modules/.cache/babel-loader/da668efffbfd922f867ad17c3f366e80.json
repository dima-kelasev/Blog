{"ast":null,"code":"var _jsxFileName = \"/Users/dima/Documents/my Blog/blog/src/component/Blog/BlogPage.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Prismic from '@prismicio/client';\nimport { Link, RichText } from 'prismic-reactjs';\nimport './style.css';\nimport Loader from './components/Loader';\nimport { apiEndpoint, accessToken } from '../../data/constants';\nimport { format } from 'date-fns-tz'; // TODO вынеси в константы эти токены и урлы, хорошей практикой считается разделять это и не держать все одном файле\n//done\n//TODO Следи за форматированием кода\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BlogPage = () => {\n  _s();\n\n  const [doc, setDocData] = React.useState([]); // console.log(doc)\n\n  React.useEffect(() => {\n    const client = Prismic.client(apiEndpoint, {\n      accessToken\n    });\n\n    const fetchData = async () => {\n      const response = await client.query(Prismic.Predicates.at('document.type', 'blog'));\n\n      if (response) {\n        setDocData(response.results);\n      }\n    };\n\n    fetchData();\n  }, []);\n  console.log(doc[1]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: (doc === null || doc === void 0 ? void 0 : doc.length) ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blogWraper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: RichText.asText(doc[1].data.title)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: doc[0].data.logo_page.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: RichText.asText(doc[1].data.text)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blogWraper\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: RichText.asText(doc[0].data.title)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: RichText.asText(doc[0].data.text)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(BlogPage, \"7F2Wqun08SntStJJH/c+b4sYSxI=\");\n\n_c = BlogPage;\nexport default _c2 = /*#__PURE__*/React.memo(BlogPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BlogPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/dima/Documents/my Blog/blog/src/component/Blog/BlogPage.js"],"names":["React","Prismic","Link","RichText","Loader","apiEndpoint","accessToken","format","BlogPage","doc","setDocData","useState","useEffect","client","fetchData","response","query","Predicates","at","results","console","log","length","asText","data","title","logo_page","url","text","memo"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,iBAA/B;AACA,OAAO,aAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAwC,sBAAxC;AACA,SAASC,MAAT,QAAuB,aAAvB,C,CAGA;AACA;AAEA;;;;;AACA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,GAAD,EAAMC,UAAN,IAAoBV,KAAK,CAACW,QAAN,CAAe,EAAf,CAA1B,CADuB,CAEvB;;AAECX,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACrB,UAAMC,MAAM,GAAGZ,OAAO,CAACY,MAAR,CAAeR,WAAf,EAA4B;AAAEC,MAAAA;AAAF,KAA5B,CAAf;;AACA,UAAMQ,SAAS,GAAG,YAAY;AAC7B,YAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACG,KAAP,CACtBf,OAAO,CAACgB,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,MAAvC,CADsB,CAAvB;;AAGA,UAAIH,QAAJ,EAAc;AACbL,QAAAA,UAAU,CAACK,QAAQ,CAACI,OAAV,CAAV;AACA;AACD,KAPD;;AAQAL,IAAAA,SAAS;AACT,GAXD,EAWG,EAXH;AAcDM,EAAAA,OAAO,CAACC,GAAR,CAAYZ,GAAG,CAAC,CAAD,CAAf;AAIA,sBACC;AAAA,cACI,CAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEa,MAAL,iBACG;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACH;AAAA,kBAAKnB,QAAQ,CAACoB,MAAT,CAAgBd,GAAG,CAAC,CAAD,CAAH,CAAOe,IAAP,CAAYC,KAA5B;AAAL;AAAA;AAAA;AAAA;AAAA,cADG,eAGH;AAAK,QAAA,GAAG,EAAEhB,GAAG,CAAC,CAAD,CAAH,CAAOe,IAAP,CAAYE,SAAZ,CAAsBC;AAAhC;AAAA;AAAA;AAAA;AAAA,cAHG,eAIH;AAAA,kBAAIxB,QAAQ,CAACoB,MAAT,CAAgBd,GAAG,CAAC,CAAD,CAAH,CAAOe,IAAP,CAAYI,IAA5B;AAAJ;AAAA;AAAA;AAAA;AAAA,cAJG,eAMH;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACC;AAAA,oBAAKzB,QAAQ,CAACoB,MAAT,CAAgBd,GAAG,CAAC,CAAD,CAAH,CAAOe,IAAP,CAAYC,KAA5B;AAAL;AAAA;AAAA;AAAA;AAAA,gBADD,eAGC;AAAA,oBAAItB,QAAQ,CAACoB,MAAT,CAAgBd,GAAG,CAAC,CAAD,CAAH,CAAOe,IAAP,CAAYI,IAA5B;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAHD;AAAA;AAAA;AAAA;AAAA;AAAA,cANG;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,gBAcF;AAAA,6BAAK,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA;AAfF,mBADD;AAoBC,CA1CD;;GAAMpB,Q;;KAAAA,Q;AA4CN,kCAAeR,KAAK,CAAC6B,IAAN,CAAWrB,QAAX,CAAf","sourcesContent":["import * as React from 'react';\nimport Prismic from '@prismicio/client';\nimport { Link, RichText } from 'prismic-reactjs';\nimport './style.css';\nimport Loader from './components/Loader';\nimport { apiEndpoint, accessToken} from '../../data/constants';\nimport { format } from 'date-fns-tz';\n\n\n// TODO вынеси в константы эти токены и урлы, хорошей практикой считается разделять это и не держать все одном файле\n//done\n\n//TODO Следи за форматированием кода\nconst BlogPage = () => {\nconst [doc, setDocData] = React.useState([]);\n// console.log(doc)\n\n\tReact.useEffect(() => {\n\t\tconst client = Prismic.client(apiEndpoint, { accessToken });\n\t\tconst fetchData = async () => {\n\t\t\tconst response = await client.query(\n\t\t\t\tPrismic.Predicates.at('document.type', 'blog')\n\t\t\t)\n\t\t\tif (response) {\n\t\t\t\tsetDocData(response.results)\n\t\t\t}\n\t\t}\n\t\tfetchData();\n\t}, [])\n\n\nconsole.log(doc[1])\n\t\n\n\nreturn (\n\t<>\n    {doc?.length ? (\n        <div className='blogWraper'>\n\t\t\t\t\t<h1>{RichText.asText(doc[1].data.title)}</h1>\n\t\t\t\t\t{/* <p>{date}</p> */}\n\t\t\t\t\t<img src={doc[0].data.logo_page.url}/>\n\t\t\t\t\t<p>{RichText.asText(doc[1].data.text)}</p>\n\n\t\t\t\t\t<div className='blogWraper'>\n\t\t\t\t\t\t<h1>{RichText.asText(doc[0].data.title)}</h1>\n\t\t\t\t\t\t\t{/* <p>{date}</p> */}\n\t\t\t\t\t\t<p>{RichText.asText(doc[0].data.text)}</p>\n        \t</div>\n        </div>\n      ) : \n\t\t\t<div><Loader /></div>\n    }\n\t</>\n\t)\n}\n\nexport default React.memo(BlogPage);"]},"metadata":{},"sourceType":"module"}