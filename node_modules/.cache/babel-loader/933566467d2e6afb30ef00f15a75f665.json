{"ast":null,"code":"var _jsxFileName = \"/Users/dima/Documents/my Blog/blog/src/component/Blog/BlogPage.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Prismic from '@prismicio/client';\nimport { RichText } from 'prismic-reactjs';\nimport './style.css';\nimport Loader from './components/Loader';\nimport { apiEndpoint, accessToken } from '../../data/constants'; // TODO вынеси в константы эти токены и урлы, хорошей практикой считается разделять это и не держать все одном файле\n//done\n//TODO Следи за форматированием кода\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BlogPage = () => {\n  _s();\n\n  const [doc, setDocData] = React.useState([]);\n  React.useEffect(() => {\n    const client = Prismic.client(apiEndpoint, {\n      accessToken\n    });\n\n    const fetchData = async () => {\n      const response = await client.query(Prismic.Predicates.at('document.type', 'blog'));\n\n      if (response) {\n        setDocData(response.results);\n      }\n    };\n\n    fetchData();\n  }, []);\n  return (\n    /*#__PURE__*/\n    // <>\n    //   {doc?.length ? (\n    //       <div className='blogWraper'>\n    // \t\t\t\t<h1>{RichText.asText(doc[1].data.title)}</h1>\n    // \t\t\t\t<img src={doc[1].data.logo_page.url}/>\n    // \t\t\t\t<p>{RichText.asText(doc[1].data.text)}</p>\n    // \t\t\t\t<div className='blogWraper'>\n    // \t\t\t\t\t<h1>{RichText.asText(doc[0].data.title)}</h1>\n    // \t\t\t\t\t<p>{RichText.asText(doc[0].data.text)}</p>\n    //       \t</div>\n    //       </div>\n    //     ) : \n    //   }\n    // </>\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 2\n    }, this)\n  );\n};\n\n_s(BlogPage, \"7F2Wqun08SntStJJH/c+b4sYSxI=\");\n\n_c = BlogPage;\nexport default _c2 = /*#__PURE__*/React.memo(BlogPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BlogPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/dima/Documents/my Blog/blog/src/component/Blog/BlogPage.js"],"names":["React","Prismic","RichText","Loader","apiEndpoint","accessToken","BlogPage","doc","setDocData","useState","useEffect","client","fetchData","response","query","Predicates","at","results","memo"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAO,aAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAwC,sBAAxC,C,CAEA;AACA;AAEA;;;;AACA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,GAAD,EAAMC,UAAN,IAAoBR,KAAK,CAACS,QAAN,CAAe,EAAf,CAA1B;AAECT,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACrB,UAAMC,MAAM,GAAGV,OAAO,CAACU,MAAR,CAAeP,WAAf,EAA4B;AAAEC,MAAAA;AAAF,KAA5B,CAAf;;AACA,UAAMO,SAAS,GAAG,YAAY;AAC7B,YAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACG,KAAP,CACtBb,OAAO,CAACc,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,MAAvC,CADsB,CAAvB;;AAGA,UAAIH,QAAJ,EAAc;AACbL,QAAAA,UAAU,CAACK,QAAQ,CAACI,OAAV,CAAV;AACA;AACD,KAPD;;AAQAL,IAAAA,SAAS;AACT,GAXD,EAWG,EAXH;AAaD;AAAA;AACC;AACC;AACA;AACD;AACA;AACA;AAEA;AACA;AACA;AACC;AACA;AACA;AAEA;AACD;AACA;AAAA,6BAAK,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA;AAjBD;AAmBC,CAnCD;;GAAMN,Q;;KAAAA,Q;AAqCN,kCAAeN,KAAK,CAACkB,IAAN,CAAWZ,QAAX,CAAf","sourcesContent":["import * as React from 'react';\nimport Prismic from '@prismicio/client';\nimport { RichText } from 'prismic-reactjs';\nimport './style.css';\nimport Loader from './components/Loader';\nimport { apiEndpoint, accessToken} from '../../data/constants';\n\n// TODO вынеси в константы эти токены и урлы, хорошей практикой считается разделять это и не держать все одном файле\n//done\n\n//TODO Следи за форматированием кода\nconst BlogPage = () => {\nconst [doc, setDocData] = React.useState([]);\n\n\tReact.useEffect(() => {\n\t\tconst client = Prismic.client(apiEndpoint, { accessToken });\n\t\tconst fetchData = async () => {\n\t\t\tconst response = await client.query(\n\t\t\t\tPrismic.Predicates.at('document.type', 'blog')\n\t\t\t)\n\t\t\tif (response) {\n\t\t\t\tsetDocData(response.results)\n\t\t\t}\n\t\t}\n\t\tfetchData();\n\t}, [])\n\nreturn (\n\t// <>\n  //   {doc?.length ? (\n  //       <div className='blogWraper'>\n\t// \t\t\t\t<h1>{RichText.asText(doc[1].data.title)}</h1>\n\t// \t\t\t\t<img src={doc[1].data.logo_page.url}/>\n\t// \t\t\t\t<p>{RichText.asText(doc[1].data.text)}</p>\n\n\t// \t\t\t\t<div className='blogWraper'>\n\t// \t\t\t\t\t<h1>{RichText.asText(doc[0].data.title)}</h1>\n\t// \t\t\t\t\t<p>{RichText.asText(doc[0].data.text)}</p>\n  //       \t</div>\n  //       </div>\n  //     ) : \n\t\t\n  //   }\n\t// </>\n\t<div><Loader /></div>\n\t)\n}\n\nexport default React.memo(BlogPage);"]},"metadata":{},"sourceType":"module"}