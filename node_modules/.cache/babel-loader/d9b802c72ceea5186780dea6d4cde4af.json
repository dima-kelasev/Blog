{"ast":null,"code":"import _regeneratorRuntime from\"/Users/dima/Documents/my Blog/blog/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/dima/Documents/my Blog/blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/dima/Documents/my Blog/blog/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import*as React from'react';import Prismic from'@prismicio/client';import{RichText}from'prismic-reactjs';import'./style.css';import Loader from'./components/Loader';import{apiEndpoint,accessToken}from'../../data/constants';// TODO вынеси в константы эти токены и урлы, хорошей практикой считается разделять это и не держать все одном файле\n//done\n//TODO Следи за форматированием кода\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var BlogPage=function BlogPage(){var _React$useState=React.useState([]),_React$useState2=_slicedToArray(_React$useState,2),doc=_React$useState2[0],setDocData=_React$useState2[1];React.useEffect(function(){var client=Prismic.client(apiEndpoint,{accessToken:accessToken});var fetchData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return client.query(Prismic.Predicates.at('document.type','blog'));case 2:response=_context.sent;if(response){setDocData(response.results);}case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchData(){return _ref.apply(this,arguments);};}();fetchData();},[]);return/*#__PURE__*/_jsx(_Fragment,{children:(doc===null||doc===void 0?void 0:doc.length)?/*#__PURE__*/_jsxs(\"div\",{className:\"blogWraper\",children:[/*#__PURE__*/_jsx(\"h1\",{children:RichText.asText(doc[1].data.title)}),/*#__PURE__*/_jsx(\"img\",{src:doc[1].data.logo_page.url}),/*#__PURE__*/_jsx(\"p\",{children:RichText.asText(doc[1].data.text)}),/*#__PURE__*/_jsxs(\"div\",{className:\"blogWraper\",children:[/*#__PURE__*/_jsx(\"h1\",{children:RichText.asText(doc[0].data.title)}),/*#__PURE__*/_jsx(\"p\",{children:RichText.asText(doc[0].data.text)})]})]}):/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Loader,{})})});};export default/*#__PURE__*/React.memo(BlogPage);","map":{"version":3,"sources":["/Users/dima/Documents/my Blog/blog/src/component/Blog/BlogPage.js"],"names":["React","Prismic","RichText","Loader","apiEndpoint","accessToken","BlogPage","useState","doc","setDocData","useEffect","client","fetchData","query","Predicates","at","response","results","length","asText","data","title","logo_page","url","text","memo"],"mappings":"4VAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,MAAOC,CAAAA,OAAP,KAAoB,mBAApB,CACA,OAASC,QAAT,KAAyB,iBAAzB,CACA,MAAO,aAAP,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAwC,sBAAxC,CAEA;AACA;AAEA;6IACA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,qBACGN,KAAK,CAACO,QAAN,CAAe,EAAf,CADH,oDAChBC,GADgB,qBACXC,UADW,qBAGtBT,KAAK,CAACU,SAAN,CAAgB,UAAM,CACrB,GAAMC,CAAAA,MAAM,CAAGV,OAAO,CAACU,MAAR,CAAeP,WAAf,CAA4B,CAAEC,WAAW,CAAXA,WAAF,CAA5B,CAAf,CACA,GAAMO,CAAAA,SAAS,0FAAG,sKACMD,CAAAA,MAAM,CAACE,KAAP,CACtBZ,OAAO,CAACa,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,CAAuC,MAAvC,CADsB,CADN,QACXC,QADW,eAIjB,GAAIA,QAAJ,CAAc,CACbP,UAAU,CAACO,QAAQ,CAACC,OAAV,CAAV,CACA,CANgB,sDAAH,kBAATL,CAAAA,SAAS,0CAAf,CAQAA,SAAS,GACT,CAXD,CAWG,EAXH,EAaD,mBACC,yBACI,CAAAJ,GAAG,OAAH,EAAAA,GAAG,SAAH,QAAAA,GAAG,CAAEU,MAAL,eACG,aAAK,SAAS,CAAC,YAAf,wBACH,oBAAKhB,QAAQ,CAACiB,MAAT,CAAgBX,GAAG,CAAC,CAAD,CAAH,CAAOY,IAAP,CAAYC,KAA5B,CAAL,EADG,cAEH,YAAK,GAAG,CAAEb,GAAG,CAAC,CAAD,CAAH,CAAOY,IAAP,CAAYE,SAAZ,CAAsBC,GAAhC,EAFG,cAGH,mBAAIrB,QAAQ,CAACiB,MAAT,CAAgBX,GAAG,CAAC,CAAD,CAAH,CAAOY,IAAP,CAAYI,IAA5B,CAAJ,EAHG,cAKH,aAAK,SAAS,CAAC,YAAf,wBACC,oBAAKtB,QAAQ,CAACiB,MAAT,CAAgBX,GAAG,CAAC,CAAD,CAAH,CAAOY,IAAP,CAAYC,KAA5B,CAAL,EADD,cAEC,mBAAInB,QAAQ,CAACiB,MAAT,CAAgBX,GAAG,CAAC,CAAD,CAAH,CAAOY,IAAP,CAAYI,IAA5B,CAAJ,EAFD,GALG,GADH,cAYF,kCAAK,KAAC,MAAD,IAAL,EAbF,EADD,CAkBC,CAlCD,CAoCA,2BAAexB,KAAK,CAACyB,IAAN,CAAWnB,QAAX,CAAf","sourcesContent":["import * as React from 'react';\nimport Prismic from '@prismicio/client';\nimport { RichText } from 'prismic-reactjs';\nimport './style.css';\nimport Loader from './components/Loader';\nimport { apiEndpoint, accessToken} from '../../data/constants';\n\n// TODO вынеси в константы эти токены и урлы, хорошей практикой считается разделять это и не держать все одном файле\n//done\n\n//TODO Следи за форматированием кода\nconst BlogPage = () => {\nconst [doc, setDocData] = React.useState([]);\n\n\tReact.useEffect(() => {\n\t\tconst client = Prismic.client(apiEndpoint, { accessToken });\n\t\tconst fetchData = async () => {\n\t\t\tconst response = await client.query(\n\t\t\t\tPrismic.Predicates.at('document.type', 'blog')\n\t\t\t)\n\t\t\tif (response) {\n\t\t\t\tsetDocData(response.results)\n\t\t\t}\n\t\t}\n\t\tfetchData();\n\t}, [])\n\nreturn (\n\t<>\n    {doc?.length ? (\n        <div className='blogWraper'>\n\t\t\t\t\t<h1>{RichText.asText(doc[1].data.title)}</h1>\n\t\t\t\t\t<img src={doc[1].data.logo_page.url}/>\n\t\t\t\t\t<p>{RichText.asText(doc[1].data.text)}</p>\n\n\t\t\t\t\t<div className='blogWraper'>\n\t\t\t\t\t\t<h1>{RichText.asText(doc[0].data.title)}</h1>\n\t\t\t\t\t\t<p>{RichText.asText(doc[0].data.text)}</p>\n        \t</div>\n        </div>\n      ) : \n\t\t\t<div><Loader /></div>\n    }\n\t</>\n\t)\n}\n\nexport default React.memo(BlogPage);"]},"metadata":{},"sourceType":"module"}